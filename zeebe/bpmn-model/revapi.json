[
  {
    "extension": "revapi.filter",
    "id": "filter",
    "configuration": {
      "archives": {
        "justification": "Ignore everything not included in the module itself",
        "include": [
          "io\\.camunda:zeebe-bpmn-model:.*"
        ]
      }
    }
  },
  {
    "extension": "revapi.differences",
    "id": "differences",
    "configuration": {
      "differences": [
        {
          "justification": "Ignore new methods for Zeebe extensions, as these are not meant to be implemented but simply consumed; as such, new methods are perfectly fine to add",
          "code": "java.method.addedToInterface",
          "new": {
            "matcher": "java",
            "match": "interface * { * io.camunda.zeebe.model.bpmn.instance.zeebe.**::^*(**); }"
          }
        },
        {
          "justification": "The abstract builders are usually not used outside of this project; a caller uses the concrete builder that inherits from the abstract builder.",
          "code": "java.class.nonFinalClassInheritsFromNewClass",
          "new": {
            "matcher": "java-package",
            "match": "io.camunda.zeebe.model.bpmn.builder"
          }
        },
        {
          "justification": "Ignore new methods for builders, as these are not meant to be implemented but simply consumed; as such, new methods are perfectly fine to add",
          "code": "java.method.addedToInterface",
          "new": {
            "matcher": "java",
            "match": "interface * { * io.camunda.zeebe.model.bpmn.builder.**::^*(**); }"
          }
        },
        {
          "justification": "Validators are used only internally; they should not used or referenced from outside of the module",
          "code": "java.class.removed",
          "old": {
            "matcher": "java-package",
            "match": "io.camunda.zeebe.model.bpmn.validation.zeebe"
          }
        },
        {
          "justification": "The parameter type of the builder changed to a more concrete type. This is okay because compensation was not officially supported yet.",
          "code": "java.method.parameterTypeParameterChanged",
          "package": "io.camunda.zeebe.model.bpmn.builder",
          "classQualifiedName": "io.camunda.zeebe.model.bpmn.builder.BoundaryEventBuilder",
          "methodName": "compensation",
          "oldType": "java.util.function.Consumer<io.camunda.zeebe.model.bpmn.builder.AbstractFlowNodeBuilder>",
          "newType": "java.util.function.Consumer<io.camunda.zeebe.model.bpmn.builder.BoundaryEventBuilder>"
        },
        {
          "justification": "The parameter type of the builder changed to a more concrete type. This is okay because compensation was not officially supported yet.",
          "code": "java.method.parameterTypeParameterChanged",
          "package": "io.camunda.zeebe.model.bpmn.builder",
          "classQualifiedName": "io.camunda.zeebe.model.bpmn.builder.AbstractBoundaryEventBuilder",
          "methodName": "compensation",
          "oldType": "java.util.function.Consumer<io.camunda.zeebe.model.bpmn.builder.AbstractFlowNodeBuilder>",
          "newType": "java.util.function.Consumer<B extends io.camunda.zeebe.model.bpmn.builder.AbstractBoundaryEventBuilder<B>>"
        },
        {
          "justification": "The EL-related builder methods from `AbstractServiceTaskBuilder` were moved to the `.AbstractTaskBuilder` parent class . This is okay because execution listeners was not officially supported yet.",
          "code": "java.method.returnTypeErasureChanged",
          "package": "io.camunda.zeebe.model.bpmn.builder",
          "classQualifiedName": "io.camunda.zeebe.model.bpmn.builder.AbstractServiceTaskBuilder",
          "oldType": "io.camunda.zeebe.model.bpmn.builder.AbstractServiceTaskBuilder",
          "newType": "io.camunda.zeebe.model.bpmn.builder.AbstractTaskBuilder"
        }
      ]
    }
  }
]
